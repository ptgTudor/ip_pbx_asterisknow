[general]
;these two together allow the user to save the dialplan with the command "dialplan save" from the CLI
static=yes	;option no is yet to be implemented
writeprotect=n  ;ability to save dialplan changes from the CLI
 
[incoming]
include => internal	    ;include the extensions from internal
include => public_category3 ;include the extensions from public_category3

exten => s,1,Answer()
exten => s,2,Background(vm-enter-num-to-call)
exten => s,n,WaitExten(20)

[internal]
include => phonebook_sip ;include the extensions from phonebook_sip
include => phonebook_iax ;include the extensions from phonebook_Iax

;echotest
exten => 611,1,Answer()
	same => 2,PlayBack(demo-echotest) ;echotest introduction
	same => 3,Echo()		  ;starting the test
	same => 4,PlayBack(demo-echodone) ;playing the test
	same => 5,Hangup()		  ;hanging up

;ringing, answer, hangup
exten => 612,1,Ringing()
	same => 2,Wait(12)          ;ring for 12 seconds
	same => 3,Answer()	    ;answer
	same => 4,PlayBack(welcome) ;playing the welcome sound file
	same => 5,Hangup()	    ;hanging up

exten => 1000,1,Dial(SIP/1000,20)  ;call 1000 for 20 seconds
exten => 2000,1,Dial(IAX2/2000,20) ;call 2000 for 20 seconds

[public_category3]
;adding an agent to a queue
exten => 4001,1,AgentCallbackLogin(,,${CALLERIDNUM}@internal)
exten => 4002,1,AgentCallbackLogin(,,1)
exten => 4000,1,Queue(markq)

[phonebook_sip]
;the sip numbers with a 10 second call time
exten => 1517,1,Dial(SIP/1517,10)
exten => 2517,1,Dial(SIP/2517,10)

[phonebook_iax]
;the iax numbers with a 10 second call time
exten => 3517,1,Dial(IAX2/3517,10)
exten => 4517,1,Dial(IAX2/4517,10)

[sip]
include => phonebook_iax ;include the extensions from iax
include => internal	 ;include the extensions from internal

;if the 3 digit number starts with a 7 (the number for the iax functions) then the user is informed that the extension is not valid
exten => _7XX,1,Answer()
	same => 2,PlayBack(pbx-invalid)
	same => 3,HangUp()

;call 1517 for 10 seconds
exten => 1517,1,Dial(SIP/1517,10)
	same => n,GotoIf($["${DIALSTATUS}" = "BUSY"]?busy:unavail) ;check the user's status
	same => n(unavail),PlayBack(/var/spool/asterisk/voicemail/default/1517/unavail) ;if it's unavailable, play the unavailable message that was recorded for the voice mail
	same => n,Authenticate(12345) ;proceed with the authentication that requires the password in the brackets
	same => n,VMAuthenticate(${CALLERID(num)}@default) ;proceed with another authentication, based on the voicemail.conf file
	same => n,VoiceMail(1517@default) ;enter the voice mail and leave a message
	same => n,PlayBack(vm-goodbye) ;play a goodbye message
	same => n,HangUp() ;hang up
	same => n(busy),PlayBack(/var/spool/asterisk/voicemail/default/1517/busy) ;if it's busy, play the busy message that was recorded for the voice mail
	same => n,HangUp() ;hang up, the voice mail is not available in this case

;call 2517 for 10 seconds
exten => 2517,1,Dial(SIP/2517,10)
	same => n,GotoIf($["${DIALSTATUS}" = "BUSY"]?busy:unavail) ;check the user's status
        same => n(unavail),PlayBack(/var/spool/asterisk/voicemail/default/2517/unavail) ;if it's unavailable, play the unavailable message that was recorded for the voice mail
        same => n,Authenticate(123456) ;proceed with authentication that requires the password in the brackets
        same => n,VMAuthenticate(${CALLERID(num)}@default) ;proceed with another authentication, based on the voicemail.conf file
        same => n,VoiceMail(2517@default) ;enter the voice mail and leave a message
        same => n,PlayBack(vm-goodbye) ;play a goodbye message
        same => n,HangUp() ;hang up
        same => n(busy),PlayBack(/var/spool/asterisk/voicemail/default/2517/busy) ;if it's busy, play the busy message that was recorded for the voice mail
        same => n,HangUp() ;hang up

;number to check the available functions
exten => 100,1,Answer()
	same => 2,PlayBack(/var/spool/asterisk/dictate/100)
	same => 3,HangUp()

;number to check the voice mail for the number that calls it
exten => 110,1,Answer()
	same => 2,PlayBack(welcome)
	same => 3,VoiceMailMain(${CALLERID(num)}@default) ;before entering the voice mail, an authentication is done based on the voicemail.conf file
	same => 4,HangUp()

;number to check the voice mail for any mailbox listed in the voicemail.conf file
exten => 120,1,Answer()
	same => 2,PlayBack(welcome)
	same => 3,VoiceMailMain(@default) ;before entering the voice mail, an authentication is done based on the voicemail.conf file
	same => 4,HangUp()

;testing the Authenticate function
exten => 130,1,Answer()
	same => 2,Authenticate(12345)  ;proceeding will require the 12345 password
	same => 3,Authenticate(123456) ;proceeding will require the 123456 password
	same => 4,PlayBack(welcome)
	same => 5,HangUp()

;testing the VMAuthenticate function that is based on the voicemail.conf file
exten => 140,1,Answer()
	same => 2,VMAuthenticate(@default) ;a mailbox and its corresponding password from the voicemail.conf file will be required
	same => 3,PlayBack(vm-goodbye)
	same => 4,HangUp()

[iax]
include => phonebook_sip ;include the extensions from sip
include => phonebook_iax ;include the extensions from iax
include => internal      ;include the extensions from internal

;if the 3 digit number starts with a 1 (the number for the sip functions) then the user is informed that the extension is not valid
exten => _1XX,1,Answer()
        same => 2,PlayBack(pbx-invalid)
        same => 3,HangUp()

;number to check the available functions
exten => 700,1,Answer()
	same => 2,PlayBack(/var/spool/asterisk/dictate/700)
	same => 3,HangUp()

;the record function, followed immediately by the playback of the recorded file
exten => 710,1,Answer()
	same => 2,PlayBack(welcome)
	same => 3,Record(message:wav,5,10) ;name:format,the number of seconds after which the recording stops if there is no sound,the length of the recording
	same => 4,Wait(3)
	same => 5,PlayBack(message) ;playing the recorded file
	same => 6,HangUp()

;the monitor function (prototype)
exten => 720,1,Answer()
	same => 2,PlayBack(welcome)
	same => 3,Monitor(gsm,conv1,m) ;format,name,option m for mixing the file
	same => 4,Dial(IAX2/4517,10) ;call a user and monitor the call
	same => 5,HangUp()

;the monitor function
exten => 725,1,Answer()
	same => 2,PlayBack(welcome)
	same => n,GotoIf($["${CALLERID(num)}" = "3517"]?monitor1) 
	same => n,GotoIf($["${CALLERID(num)}" = "4517"]?monitor2) ;checks the caller ID and goes to the other iax number accordingly
	same => n(monitor1),Monitor(gsm,conv,m) ;format,unique identifier,option m for mixing the file
	same => n,Dial(IAX2/4517/10) ;call the number
	same => n,HangUp()
	same => n(monitor2),Monitor(gsm,conv,m) ;format,unique identifier,option m for mixing the file
	same => n,Dial(IAX2/3517,10) ;call the number
	same => n,HangUp()

;the monitor function (prototype)
exten => 730,1,Answer()
	same => 2,PlayBack(welcome)
	same => 3,Monitor(gsm,conv2,m) ;format,name,option m for mixing the file
	same => 4,Dial(IAX2/3517,10) ;call the number and monitor the call
	same => 5,HangUp()

;check the monitored call from the prototype
exten => 721,1,Answer()
	same => 2,PlayBack(welcome)
	same => 3,Wait(1)
	same => 4,PlayBack(/var/spool/asterisk/monitor/conv1)
	same => 5,HangUp()

;check the monitored call
exten => 726,1,Answer()
	same => 2,PlayBack(welcome)
        same => 3,Wait(1)
        same => 4,PlayBack(/var/spool/asterisk/monitor/conv) ;the monitored call
        same => 5,HangUp()

;check the monitored call from the prototype
exten => 731,1,Answer()
	same => 2,PlayBack(welcome)
	same => 3,Wait(1)
	same => 4,PlayBack(/var/spool/asterisk/monitor/conv2)
	same => 5,HangUp()

;the dictate function
exten => 740,1,Answer()
	same => 2,PlayBack(welcome)
	same => 3,Wait(1)
	same => 4,Dictate() ;dictate the name of the file, record it and play it
	same => 5,HangUp()	
